scalar DateTime

type Client{
  id: ID!
  name: String!
  url: String!
  user: ID
  date: DateTime!
  update: DateTime!
}

type History{
  id: ID!
  topic: ID!
  title: String!
  tags: [String!]!
  text: String!
  date: DateTime!
  hash: String!
}

type Msg{
  id: ID!
  receiver: ID
  text: String!
  date: DateTime!
}

type Profile{
  id: ID!
  user: ID
  name: String!
  text: String!
  date: DateTime!
  update: DateTime!
  sn: String!
}

enum VoteFlag{
  uv
  dv
  not
}

enum ResDeleteFlag{
  self
  freeze
}
enum ResNormalType{
  normal
}
type ResNormal{
  type:ResNormalType!
  id: ID!
  topic: ID!
  date: DateTime!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  name: String
  text: String!
  reply: ID
  profile: ID
  isReply: Boolean
}
enum ResHistoryType{
  history
}
type ResHistory{
  type:ResHistoryType!
  id: ID!
  topic: ID!
  date: DateTime!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  history: ID!
}
enum ResTopicType{
  topic
}
type ResTopic{
  type:ResTopicType!
  id: ID!
  topic: ID!
  date: DateTime!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag
}
enum ResForkType{
  fork
}
type ResFork{
  type:ResForkType!
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  fork: ID!
}
enum ResDeleteType{
  delete
}
type ResDelete{
  type:ResDeleteType!
  id: ID!
  topic: ID!
  date: DateTime!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  flag: ResDeleteFlag!
}

union Res=ResNormal|ResHistory|ResTopic|ResFork|ResDelete

type TokenReq{
  token: ID!
  key: String!
}
enum TokenMasterType{
  master
}
type TokenMaster{
  type:TokenMasterType!
  id: ID!
  key: String!
  user: ID!
  date: DateTime!
}
enum TokenGeneralType{
  general
}
type TokenGeneral{
  type:TokenGeneralType!
  id: ID!
  key: String!
  user: ID!
  date: DateTime!

  client:ID!
}

union Token=TokenMaster|TokenGeneral

enum TopicNormalType{
  normal
}

type TopicNormal{
  type:TopicNormalType!
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}
enum TopicOneType{
  one
}
type TopicOne{
  type:TopicOneType!
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}
enum TopicForkType{
  fork
}
type TopicFork{
  TopicFork:TopicForkType!
  id: ID!
  title: String!
  update: DateTime!
  date: DateTime!
  resCount: Int!
  active: Boolean!

  parent:ID!
}

union Topic=TopicNormal|TopicOne|TopicFork

type Storage{
  key:String!
  value:String!
}

input DateQuery{
  date:DateTime!
  type:DateType!
}

enum DateType{
  gt
  gte
  lt
  lte
}

type User{
  id:ID!
  sn:String!
}

type Tags{
  name:String!
  count:Int!
}

input ClientQuery{
  id:[ID!]
  self:Boolean
}

input HistoryQuery{
  id:[ID!]
  topic:[ID!]
}

input MsgQuery{
  id:[ID!]
  date:DateQuery
}

input ProfileQuery{
  id:[ID!]
  self:Boolean
}

input ResQuery{
  id:[ID!]
  topic:ID
  notice:Boolean
  hash:String
  reply:ID
  profile:ID
  self:Boolean
  text:String
  date:DateQuery
}

type Query{
  clients(query:ClientQuery!):[Client!]!
  histories(query:HistoryQuery!):[History!]!
  msgs(query:MsgQuery!,limit:Int=100):[Msg!]!
  profiles(query:ProfileQuery!):[Profile!]!
  reses(query:ResQuery!,limit:Int=100):[Res!]!
  storages(key:[String!]):[Storage!]!
  token:Token!
  tokens:[Token!]!
  topics(id:[ID!],title:String,tags:[String!],skip:Int=0,limit:Int=100,activeOnly:Boolean,parent:ID):[Topic!]!
  topicTags(limit:Int=100):[Tags!]!
  userID(sn:String!):ID!
  userSN(id:ID!):String!
}

enum VoteType{
  uv
  dv
  cv
}

type Mutation {
  createClient(name:String!,url:String!):Client!
  updateClient(id:ID!,name:String!,url:String!):Client!
  createProfile(name:String!,text:String!,sn:String!):Profile!
  updateProfile(id:ID!,name:String!,text:String!,sn:String!):Profile!
  createRes(topic:String!,name:String,text:String!,reply:String,profile:String,age:Boolean!):Res!
  voteRes(res:ID!,type:VoteType!):Res!
  delRes(res:ID!):Res!
  setStorage(key:String!,value:String!):Boolean
  delStorage(key:String!):Boolean
  delTokenClient(client:ID!):Boolean
  createTokenGeneral(client:ID!):TokenGeneral!
  createTokenMaster:TokenMaster!
  createTokenReq:TokenReq!
  authTokenReq(id:ID!,key:String!):TokenGeneral!
  createTopicNormal(title:String!,tags:[String!]!,text:String!):TopicNormal!
  createTopicOne(title:String!,tags:[String!]!,text:String!):TopicOne!
  createTopicFork(title:String!,parent:ID!):TopicFork!
  updateTopic(id:ID!,title:String!,tags:[String!],text:String!):TopicNormal!
  createUser(sn:String!,pass:String!):User!
  updateUser(sn:String!,pass:String!):User!
}

type ResSubscript{
  res:Res!
  count:Int!
}

type Subscription {
  resAdded(topic:ID!):ResSubscript!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}