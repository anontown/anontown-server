type Client{
  id: ID!
  name: String!
  url: String!
  user: ID
  date: String!
  update: String!
}

type History{
  id: ID!
  topic: ID!
  title: String!
  tags: [String!]!
  text: String!
  date: String!
  hash: String!
}

type Msg{
  id: ID!
  receiver: ID
  text: String!
  date: String!
}

type Profile{
  id: ID!
  user: ID
  name: String!
  text: String!
  date: String!
  update: String!
  sn: String!
}

enum VoteFlag{
  uv
  dv
  not
}

enum ResDeleteFlag{
  self
  freeze
}

interface ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag
}

type ResNormal implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  name: String
  text: String!
  reply: ID
  profile: ID
  isReply: Boolean
}

type ResHistory implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  history: ID!
}

type ResTopic implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag
}

type ResFork implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  fork: ID!
}

type ResDelete implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  flag: ResDeleteFlag!
}

union Res=ResNormal|ResHistory|ResTopic|ResFork|ResDelete

type TokenReq{
  token: ID!
  key: String!
}

interface TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!
}

type TokenMaster implements TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!
}

type TokenGeneral implements TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!

  client:ID!
}

union Token=TokenMaster|TokenGeneral

interface TopicBase{
  id: ID!
  title: String!
  update: String!
  date: String!
  resCount: Int!
  active: Boolean!
}

interface TopicSearchBase implements TopicBase{
  id: ID!
  title: String!
  update: String!
  date: String!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicNormal implements TopicSearchBase{
  id: ID!
  title: String!
  update: String!
  date: String!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicOne implements TopicSearchBase{
  id: ID!
  title: String!
  update: String!
  date: String!
  resCount: Int!
  active: Boolean!

  tags: [String!]!
  text:String!
}

type TopicFork implements TopicSearchBase{
  id: ID!
  title: String!
  update: String!
  date: String!
  resCount: Int!
  active: Boolean!

  parent:ID!
}

union Topic=TopicNormal|TopicOne|TopicFork

input Date{
  date:Srting!
  type:DateType!
}

enum DateType{
  gt
  gte
  lt
  lte
}

type User{
  id:ID!
  sn:String!
}

type Query{
  clients(id:[ID!],self:Boolean,date:Date,limit:Int=100):[Client!]!
  histories(id:[ID!],topic:[ID!],date:Date,limit:Int=100):[History!]!
  msgs(id:[ID!],date:Date,limit:Int=100):[Msg!]!
  profiles(id:[ID!],self:Boolean,limit:Int=100):[Profile!]!
  reses(
    id:[ID!],
    topic:ID,
    notice:Boolean,
    hash:String,
    reply:String,
    profile:String,
    self:Boolean,
    text:String,
    date:Date,
    limit:Int=100):[Res!]!
}

type Mutation {
  createClient(name:String!,url:String!):Client!
  updateClient(id:ID!,name:String!,url:String!):Client!
  createProfile(name:String!,text:String!,sn:String!):Profile!
  updateProfile(id:ID!,name:String!,text:String!,sn:String!):Profile!
  createRes(topic:String!,name:String,text:String!,reply:String,profile:String,age:Boolean!):Res!
}