type Client{
  id: ID!
  name: String!
  url: String!
  user: ID
  date: String!
  update: String!
}

type History{
  id: ID!
  topic: ID!
  title: String!
  tags: [String!]!
  text: String!
  date: String!
  hash: String!
}

type Msg{
  id: ID!
  receiver: ID
  text: String!
  date: String!
}

type Profile{
  id: ID!
  user: ID
  name: String!
  text: String!
  date: String!
  update: String!
  sn: String!
}

enum VoteFlag{
  uv
  dv
  not
}

enum ResDeleteFlag{
  self
  freeze
}

interface ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag
}

type ResNormal implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  name: String
  text: String!
  reply: ID
  profile: ID
  isReply: Boolean
}

type ResHistory implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  history: ID!
}

type ResTopic implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag
}

type ResFork implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  fork: ID!
}

type ResDelete implements ResBase{
  id: ID!
  topic: ID!
  date: String!
  user: ID
  uv: Int!
  dv: Int!
  hash: String!
  replyCount: Int!
  voteFlag: VoteFlag

  flag: ResDeleteFlag!
}

union Res=ResNormal|ResHistory|ResTopic|ResFork|ResDelete

type TokenReq{
  token: ID!
  key: String!
}

interface TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!
}

type TokenMaster implements TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!
}

type TokenGeneral implements TokenBase{
  id: ID!
  key: String!
  user: ID!
  date: String!

  client:ID!
}

union Token=TokenMaster|TokenGeneral